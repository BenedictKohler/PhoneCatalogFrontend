[{"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\App.js":"1","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\NotFound.js":"2","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\index.js":"3","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\services\\PhoneCatalogService.js":"4","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\Home.js":"5","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\reportWebVitals.js":"6","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\PhoneView.js":"7","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\AddPhone.js":"8"},{"size":832,"mtime":1610619945976,"results":"9","hashOfConfig":"10"},{"size":556,"mtime":1610624922093,"results":"11","hashOfConfig":"10"},{"size":288,"mtime":1610459018239,"results":"12","hashOfConfig":"10"},{"size":1233,"mtime":1610604737440,"results":"13","hashOfConfig":"10"},{"size":10708,"mtime":1610692275602,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1610208942922,"results":"15","hashOfConfig":"10"},{"size":12233,"mtime":1610655763318,"results":"16","hashOfConfig":"10"},{"size":11421,"mtime":1610628842111,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n5idl2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\App.js",[],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\NotFound.js",[],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\index.js",[],["37","38"],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\services\\PhoneCatalogService.js",[],["39","40"],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\Home.js",["41"],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\reportWebVitals.js",[],"C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\PhoneView.js",["42","43","44","45","46","47","48","49"],"// This page shows more details about a phone and allows you to update its values\r\n\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport { Phone } from 'react-bootstrap-icons';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PhoneCatalogService from '../services/PhoneCatalogService';\r\n\r\n// Allows users to update and view a phone from the catalog\r\nclass PhoneView extends React.Component {\r\n\r\n    // Set initial states\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderImage = this.renderImage.bind(this);\r\n        this.readFile = this.readFile.bind(this);\r\n        this.state = {\r\n            phoneName: \"\", manufacturer: \"\", \r\n            description: \"\", color: \"\",\r\n            price: -1, imageURL: \"\", imageObj: null,\r\n            screen: \"\", processor: \"\", ram: -1,\r\n            showModal: false, isLoading: false,\r\n            updateVals: {}, redirect: false\r\n        };\r\n    }\r\n\r\n    // This displays the users selected picture and updates the image to be uploaded\r\n    renderImage(val) {\r\n        this.setState({\r\n            imageURL: URL.createObjectURL(val),\r\n            imageObj: val\r\n        });\r\n    }\r\n\r\n    // Used to display and hide the modal pop-up\r\n    handleClose = () => {this.setState({showModal: false});}\r\n    handleShow = () => {this.setState({showModal: true});}\r\n\r\n    // Converts the image to Base64 for easier upload\r\n    readFile(file) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = res => {\r\n                resolve(res.target.result);\r\n            };\r\n\r\n            reader.onerror = err => reject(err);\r\n\r\n            reader.readAsDataURL(file);\r\n        });\r\n    }\r\n\r\n    // If user confirms their intention with the modal pop-up\r\n    completeUpdate = async () => {\r\n        // Process the changes made\r\n        this.handleClose();\r\n\r\n        this.setState({isLoading: true});\r\n\r\n        // If user wants to update image\r\n        if (this.state.updateVals.imageFileName != null) {\r\n            // Encode the image\r\n            const contents = await this.readFile(this.state.updateVals.imageFileName);\r\n            this.state.updateVals.imageFileName = contents;\r\n        }\r\n\r\n        PhoneCatalogService.updatePhone(this.props.location.phone.id, this.state.updateVals).then(() => {\r\n            this.setState({updateVals: {}, isLoading: false});\r\n        });\r\n\r\n    }\r\n\r\n    // Remove this phone from the catalog perminently\r\n    handleDelete = () => {\r\n        this.setState({isLoading: true});\r\n\r\n        PhoneCatalogService.deletePhone(this.props.location.phone.id).then(() => {\r\n            this.setState({redirect: true}); // Go back to home page\r\n        })\r\n\r\n    }\r\n\r\n    // Creates an array of values that need updating and displays a confirmation pop up\r\n    handleUpdate = () => {\r\n\r\n        let tempVals = {};\r\n\r\n        if (this.state.phoneName != \"\") {\r\n            tempVals.name = this.state.phoneName;\r\n        }\r\n        if (this.state.manufacturer != \"\") {\r\n            tempVals.manufacturer = this.state.manufacturer;\r\n        }\r\n        if (this.state.description != \"\") {\r\n            tempVals.description = this.state.description;\r\n        }\r\n        if (this.state.color != \"\") {\r\n            tempVals.color = this.state.color;\r\n        }\r\n        if (this.state.price > 0) {\r\n            tempVals.price = this.state.price;\r\n        }\r\n        if (this.state.imageObj != null) {\r\n            tempVals.imageFileName = this.state.imageObj;\r\n        }\r\n        if (this.state.screen != \"\") {\r\n            tempVals.screen = this.state.screen;\r\n        }\r\n        if (this.state.processor != \"\") {\r\n            tempVals.processor = this.state.processor;\r\n        }\r\n        if (this.state.ram > 0) {\r\n            tempVals.ram = this.state.ram;\r\n        }\r\n\r\n        // If changes have been made\r\n        if (Object.keys(tempVals).length > 0) {\r\n            this.setState({updateVals: tempVals});\r\n\r\n            this.handleShow();\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirect) return <Redirect to=\"/\" />;\r\n        try {\r\n            let temp = this.props.location.phone.name; // Check that a phone has been passed to this address\r\n        } catch {\r\n            return <Redirect to=\"/invalid\" />; // If not, the user did not access this page through the appropriate link\r\n        }\r\n        return (\r\n            <Container>\r\n\r\n                <h2 class=\"mt-3\">View or update phone</h2>\r\n\r\n                <Modal\r\n                    show={this.state.showModal}\r\n                    onHide={this.handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Update Phone</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>Are you sure you want to make changes to this phone?</Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"danger\" onClick={this.handleClose}>No</Button>\r\n                        <Button variant=\"success\" onClick={this.completeUpdate}>Yes</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Form>\r\n\r\n                    <Container className=\"mt-3\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Phone name</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ phoneName: e.target.value })} placeholder={this.props.location.phone.name} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.phoneNameError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Manufacturer</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ manufacturer: e.target.value })} placeholder={this.props.location.phone.manufacturer} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.manufacturerError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Screen</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ screen: e.target.value })} placeholder={this.props.location.phone.screen} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.screenError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Processor</Form.Label>\r\n                                    <Form.Control type=\"text\" onChange={e => this.setState({ processor: e.target.value })} placeholder={this.props.location.phone.processor} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.processorError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    <Image src={this.state.imageURL == \"\" ? this.props.location.phone.imageFileName : this.state.imageURL} className=\"mb-3\" width=\"50%\" rounded />\r\n\r\n                    <Container>\r\n                        <Form.Group>\r\n                            <Form.File\r\n                                label=\"Select image of phone\"\r\n                                custom\r\n                                onChange={e => this.renderImage(e.target.files[0])}\r\n                            />\r\n                            <Form.Text className=\"text-danger\">{this.state.imageError}</Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={2} onChange={e => this.setState({ description: e.target.value })} placeholder={this.props.location.phone.description} />\r\n                            <Form.Text className=\"text-danger\">{this.state.descriptionError}</Form.Text>\r\n                        </Form.Group>\r\n                    </Container>\r\n\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Ram</Form.Label>\r\n                                    <Form.Control type=\"number\" onChange={e => this.setState({ ram: e.target.value })} placeholder={this.props.location.phone.ram} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.ramError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col>\r\n                                <Form.Group>\r\n                                    <Form.Label>Price</Form.Label>\r\n                                    <Form.Control type=\"number\" onChange={e => this.setState({ price: e.target.value })} placeholder={this.props.location.phone.price} />\r\n                                    <Form.Text className=\"text-danger\">{this.state.priceError}</Form.Text>\r\n                                </Form.Group>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    {this.state.isLoading && <Alert variant=\"primary\">\r\n                        <Alert.Heading>Processing...</Alert.Heading>\r\n                        <p>Please be patient</p>\r\n                    </Alert>}\r\n\r\n                    <Container className=\"mb-3\">\r\n                        <Row>\r\n                            <Col>\r\n                                <Dropdown>\r\n                                    <Dropdown.Toggle variant=\"outline-dark\">{this.state.color === \"\" ? this.props.location.phone.color : this.state.color}</Dropdown.Toggle>\r\n                                    <Dropdown.Menu>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"Black\" })} >Black</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"Purple\" })} >Purple</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"Silver\" })} >Silver</Dropdown.Item>\r\n                                        <Dropdown.Item onClick={() => this.setState({ color: \"White\" })} >White</Dropdown.Item>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                                <Form.Text className=\"text-danger\">{this.state.colorError}</Form.Text>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button variant=\"outline-danger\" onClick={this.handleDelete} type=\"button\">Delete Phone</Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button variant=\"outline-success\" onClick={this.handleUpdate} type=\"button\"><Phone /> Update Phone</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                </Form>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneView;","C:\\Users\\User\\source\\repos\\PhoneCatalog\\Frontend\\phone-catalog\\src\\components\\AddPhone.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},{"ruleId":"52","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":42,"column":31,"nodeType":"58","messageId":"59","endLine":42,"endColumn":33},{"ruleId":"56","severity":1,"message":"60","line":98,"column":34,"nodeType":"58","messageId":"59","endLine":98,"endColumn":36},{"ruleId":"56","severity":1,"message":"60","line":101,"column":37,"nodeType":"58","messageId":"59","endLine":101,"endColumn":39},{"ruleId":"56","severity":1,"message":"60","line":104,"column":36,"nodeType":"58","messageId":"59","endLine":104,"endColumn":38},{"ruleId":"56","severity":1,"message":"60","line":107,"column":30,"nodeType":"58","messageId":"59","endLine":107,"endColumn":32},{"ruleId":"56","severity":1,"message":"60","line":116,"column":31,"nodeType":"58","messageId":"59","endLine":116,"endColumn":33},{"ruleId":"56","severity":1,"message":"60","line":119,"column":34,"nodeType":"58","messageId":"59","endLine":119,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":138,"column":17,"nodeType":"63","messageId":"64","endLine":138,"endColumn":21},{"ruleId":"56","severity":1,"message":"57","line":204,"column":53,"nodeType":"58","messageId":"59","endLine":204,"endColumn":55},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]